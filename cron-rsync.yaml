apiVersion: v1
kind: Template
metadata:
  name: psql-cron
  annotations:
    description: "Deploys PostgreSQL Backup Cronjob"

parameters:
  - name: NAME
    description: "Name of the cronjob"
    value: "psql-cron"
  - name: SCHEDULE
    description: "Schedule for running the cronjob"
    value: "0 3 * * *"
  - name: PGSQL_SERVICE
    description: "Which MySQL service needs to be backed up."
    required: true
    value:

  - name: PGSQL_SECRET
    description: "PgSQL Secret-file to use (usually same as PGSQL_SERVICE)"
    required: true
    value:
  - name: PGSQL_SECRET_USER_KEY
    description: "Key used in postgresql secret file for username"
    value: "database-user"
  - name: PGSQL_SECRET_PASS_KEY
    description: "Key used in postgresql secret file for password"
    value: "database-password"

  - name: RSYNC_TARGET_LOCATION
    description: "File location at the target host"
    required: true
    value:
  - name: RSYNC_TARGET_HOST
    description: "Host where the backupfile needs to be send to"
    required: true
    value:
  - name: RSYNC_USER
    description: "Useraccount used to logon to the host"
    required: true
    value:
  - name: RSYNC_SECRET_NAME
    description: "Name for the rsync private key secret name"
    value: mysql-backup-ssh-key
  - name: RSYNC_KEY_NAME
    description: "Private key file name used to make the ssh key (eg. mysql_backup)"
    value: "mysql_backup"


  - name: NOTIFY_SLACK_ENABLED
    description: "Set to true if you want to use slack notifications"
    value: "false"
  - name: NOTIFY_EMAIL_ENABLED
    description: "Set to true if you want to use email notifications"
    value: "false"
  - name: NOTIFY_STDOUT_ENABLED
    description: "Logs errors to stdout"
    value: "true"
  - name: SLACK_API
    description: "URL to your Slack app."
    value: "CHANGEME"
  - name: DEBUG
    description: "Debugging mode"
    value: "false"


objects:
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: ${NAME}
  spec:
    schedule: ${SCHEDULE}
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${NAME}
          spec:
            containers:
            - name: ${NAME}
              image: npohosting/psql-backup:latest
              volumeMounts:
                - name: secretmounts
                  mountPath: /tmp/secretmounts
                  readOnly: true
              imagePullPolicy: Always
              env:
              - name: NAME
                value: ${NAME}
              - name: STORAGE_METHOD
                value: rsync
              - name: PGSQL_SERVICE
                value: ${PGSQL_SERVICE}
              - name: RSYNC_USER
                value: ${RSYNC_USER}
              - name: RSYNC_TARGET_LOCATION
                value: ${RSYNC_TARGET_LOCATION}
              - name: RSYNC_TARGET_HOST
                value: ${RSYNC_TARGET_HOST}
              - name: RSYNC_IDENTITY_FILE
                value: /tmp/secretmounts/${RSYNC_KEY_NAME}
              - name: DEBUG
                value: ${DEBUG}
              - name: NOTIFY_SLACK_ENABLED
                value: ${NOTIFY_SLACK_ENABLED}
              - name: NOTIFY_EMAIL_ENABLED
                value: ${NOTIFY_EMAIL_ENABLED}
              - name: NOTIFY_STDOUT_ENABLED
                value: ${NOTIFY_STDOUT_ENABLED}
              - name: SLACK_API
                value: ${SLACK_API}
              - name: PGSQL_USER
                valueFrom:
                  secretKeyRef:
                    key: ${PGSQL_SECRET_USER_KEY}
                    name: ${PGSQL_SECRET}
            volumes:
              - name: secretmounts
                secret:
                  secretName: ${RSYNC_SECRET_NAME}
            restartPolicy: Never
